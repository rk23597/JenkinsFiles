pipeline{   
   agent any
   stages {
        //Checkout Git Repo
        stage('Checkout') {
            steps {
                pwd()
                git  url: 'https://github.com/rk23597/ApiOps.git', branch: master
            }
        }
        //Lint the OpenAPI spec using Insomnia CLI
        stage('Lint OpenAPI Spec') {
            steps {
                sh 'inso lint spec ./apiConfig/httpbinOAS.yaml'
            }
        }
        //Generate Kong configuration in declarative format
        stage('Generate Kong configuration in declarative format') {
            steps {
                sh 'inso generate config ./apiConfig/httpbinOAS.yaml --type declarative -o ./apiConfig/httpbinOAS-kong.yaml'
            }
        }
        //Display the contents of the generated Kong configuration
        stage('open kong.yaml') {
            steps {
                sh 'cat ./apiConfig/httpbinOAS-kong.yaml'
            }
        }
 
        //Validate the Kong configuration using deck CLI
        stage('Validate the Kong configuration using deck CLI') {
            steps {
                sh 'deck validate -s ./apiConfig/httpbinOAS-kong.yaml'
            }
        }
        //Convert the Kong configuration to version 3.x using deck CLI
        stage('Convert kong declarative') {
            steps {
                
                sh 'yes | deck convert --from kong-gateway-2.x --to kong-gateway-3.x --input-file ./apiConfig/httpbinOAS-kong.yaml --output-file ./apiConfig/httpbinOAS-kong-3x.yaml'
            }
        } 
        //Deploy to Kong
        stage('Deploy to Kong') {
            steps {
                sh 'deck sync -s ./apiConfig/httpbinOAS-kong-3x.yaml --kong-addr http://34.125.114.21:8001 --workspace $WORKSPACE --tls-skip-verify'
            }
        }
   }
   post {
        always {
           deleteDir()
       }
    }
}
